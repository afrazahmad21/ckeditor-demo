{"version":3,"sources":["apiUrls.js","App.js","serviceWorker.js","index.js"],"names":["SaveCKHtml","concat","App","state","dataCK","onChange","event","editor","data","getData","console","log","_this","setState","onSubmit","e","axios","post","auth","username","password","then","response","message","alert","catch","err","this","split","join","react_default","a","createElement","className","ckeditor_default","ClassicEditor","onInit","style","marginTop","fontWeight","rows","cols","value","type","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iSACaA,EAAU,GAAAC,OADP,wBACO,SCgERC,6MA1DXC,MAAQ,CACJC,OAAQ,sBAEZC,SAAW,SAACC,EAAOC,GACf,IAAMC,EAAOD,EAAOE,UACpBC,QAAQC,IAAI,CAACL,QAAOC,SAAQC,SAC5BI,EAAKC,SAAS,CAACT,OAAQI,OAG3BM,SAAW,SAACC,GAAM,IACPX,EAAUQ,EAAKT,MAAfC,OACPY,IAAMC,KAAKjB,EAAY,CAACQ,KAAMJ,GAAS,CACnCc,KAAM,CACFC,SAAU,WACVC,SAAU,iBAGbC,KAAK,SAAAC,GAAY,IACPC,EAAWD,EAASd,KAApBe,QACPC,MAAMD,KACPE,MAAM,SAAAC,GAAO,IAETH,EAAWG,EAAIlB,KAAfe,QACPC,MAAMD,8EAIL,IACAnB,EAAUuB,KAAKxB,MAAfC,OAGL,OAFAA,EAASA,EAAOwB,MAAM,OAAOC,KAAK,MAG9BC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACIxB,OAAQ4B,IACR3B,KAAK,mBACL4B,OAAQ,SAAA7B,GAEJG,QAAQC,IAAI,0BAA2BJ,IAE3CF,SAAUsB,KAAKtB,WAGnByB,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAACC,UAAW,OAAQC,WAAY,SACxCT,EAAAC,EAAAC,cAAA,sBAEJF,EAAAC,EAAAC,cAAA,OAAKK,MAAO,CAACC,UAAW,SACpBR,EAAAC,EAAAC,cAAA,YAAUQ,KAAM,EAAGC,KAAM,IAAKC,MAAOtC,KAEzC0B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAQW,KAAM,SAAUC,QAASjB,KAAKb,UAAtC,sBApDF+B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.2cd4565e.chunk.js","sourcesContent":["const baseUrl = 'http://localhost:3010';\nexport const SaveCKHtml = `${baseUrl}/save`;\n","import React, {Component} from 'react';\nimport CKEditor from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\nimport axios from 'axios';\nimport {SaveCKHtml} from './apiUrls';\n\nclass App extends Component {\n    state = {\n        dataCK: \"<p>Edit Here</p>\"\n    }\n    onChange = (event, editor) => {\n        const data = editor.getData();\n        console.log({event, editor, data});\n        this.setState({dataCK: data})\n    }\n\n    onSubmit = (e) => {\n        const {dataCK} = this.state;\n        axios.post(SaveCKHtml, {data: dataCK}, {\n            auth: {\n                username: 'ckeditor',\n                password: 'pakistan123'\n            }\n        })\n            .then(response => {\n                const {message} = response.data\n                alert(message)\n            }).catch(err => {\n                debugger\n            const {message} = err.data\n            alert(message)\n        })\n    }\n\n    render() {\n        let {dataCK} = this.state;\n        dataCK = dataCK.split('\\\\n').join('\\n');\n\n        return (\n            <div className=\"App\">\n                <h2> CKEditor 5 </h2>\n                <CKEditor\n                    editor={ClassicEditor}\n                    data=\"<p>Edit here</p>\"\n                    onInit={editor => {\n                        // You can store the \"editor\" and use when it is needed.\n                        console.log('Editor is ready to use!', editor);\n                    }}\n                    onChange={this.onChange}\n                />\n\n                <div style={{marginTop: \"20px\", fontWeight: \"bold\"}}>\n                    <label>Code</label>\n                </div>\n                <div style={{marginTop: \"10px\"}}>\n                    <textarea rows={7} cols={100} value={dataCK}/>\n                </div>\n                <div>\n                    <button type={\"button\"} onClick={this.onSubmit}>Save HTML</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}